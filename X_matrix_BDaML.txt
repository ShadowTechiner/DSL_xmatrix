Xmat xm

xm.EmpNeeds = [
				EmpNeed {Name= "The development of requirements, terms of reference for the design and development / purchase of high-tech software"},
				EmpNeed {Name= "Designing knowledge-intensive information systems, services for the formation and application of mathematical models, including using machine learning technologies and big data"},
				EmpNeed {Name= "The development of knowledge-intensive information systems based on machine learning technologies and big data (includes the development of mathematical models/architectures of machine learning models)."},
				EmpNeed {Name= "Conducting scientific research and performing analytical work using big data technologies and machine learning"},
				EmpNeed {Name= "The development of projects of digital transformations and development of informatization of the enterprise/industry"}
			  ]
			  
xm.Technologies = [
					Technology {Name="Distributed computing and database technologies"},
					Technology {Name="Big data technologies"},
					Technology {Name="Machine learning technologies"},
					Technology {Name="Project management technologies for IT solutions of various scales and complexity"},
					Technology {Name="Technologies for integrating system and application software"},
					Technology {Name="Mathematical and computer modeling methods and technologies"},
					]
xm.Outcomes = [
				LrnOut {Name="Able to manage analytical work"},
				LrnOut {Name="Able to perform work and manage work on the creation (modification) and maintenance of integration solutions"},
				LrnOut {Name="Able to manage the processes of assessing the complexity, labor intensity, terms of work"},
				LrnOut {Name="Able to manage low-to-medium complexity IT projects under conditions of uncertainty generated by change requests using formal project risk and problem management tools"},
				LrnOut {Name="Able to manage maintenance work and projects for the creation (modification) of IS that automate organizational management tasks and business processes"},
				LrnOut {Name="Able to manage software, hardware, technological and human resources"},
				LrnOut {Name="Able to apply machine learning algorithms to create models and implement models to large amounts of data."}
				]
xm.Courses = [
				Course {Name="Methodology of translational research"},
				Course {Name="Methods and models for multivariate data analysis"},
				Course {Name="Evolutionary computing"},
				Course {Name="Specialized machine learning technologies and neural network architectures for deep learning"},
				Course {Name="Machine Learning"},
				Course {Name="Technologies and Infrastructure for Big Data"},
				Course {Name="Parallel algorithms for the analysis and synthesis of data"},
				Course {Name="Data visualization"},
				Course {Name="Social network analysis"}
				]
				
Cross oneX = {
			Weight = "x",
			Desc = "Weak connections"
		  }
Cross doubleX = {
			Weight = "xx",
			Desc = "Medium connections"
		  }
Cross tripleX = {
			Weight = "xxx",
			Desc = "Strong connections"
		  }

//Filling CrossEmpTechs cross-matrix
xm.CrossEmpTechs[0][0] = oneX
xm.CrossEmpTechs[0][1] = oneX
xm.CrossEmpTechs[0][2] = doubleX
xm.CrossEmpTechs[0][3] = doubleX
xm.CrossEmpTechs[0][4] = oneX
xm.CrossEmpTechs[0][5] = doubleX
xm.CrossEmpTechs[1][0] = oneX
xm.CrossEmpTechs[1][1] = doubleX
xm.CrossEmpTechs[1][2] = tripleX
xm.CrossEmpTechs[1][3] = doubleX
xm.CrossEmpTechs[1][4] = doubleX
xm.CrossEmpTechs[1][5] = doubleX
xm.CrossEmpTechs[2][0] = doubleX
xm.CrossEmpTechs[2][1] = doubleX
xm.CrossEmpTechs[2][2] = tripleX
xm.CrossEmpTechs[2][3] = doubleX
xm.CrossEmpTechs[2][4] = doubleX
xm.CrossEmpTechs[2][5] = tripleX
xm.CrossEmpTechs[3][0] = doubleX
xm.CrossEmpTechs[3][1] = doubleX
xm.CrossEmpTechs[3][2] = doubleX
xm.CrossEmpTechs[3][3] = doubleX
xm.CrossEmpTechs[3][4] = oneX
xm.CrossEmpTechs[3][5] = tripleX
xm.CrossEmpTechs[4][0] = tripleX
xm.CrossEmpTechs[4][1] = tripleX
xm.CrossEmpTechs[4][2] = doubleX
xm.CrossEmpTechs[4][3] = tripleX
xm.CrossEmpTechs[4][4] = tripleX
xm.CrossEmpTechs[4][5] = doubleX

//Filling CrossEmpLearns cross-matrix
xm.CrossEmpLearns[0][0] = doubleX
xm.CrossEmpLearns[0][1] = doubleX
xm.CrossEmpLearns[0][2] = doubleX
xm.CrossEmpLearns[0][3] = doubleX
xm.CrossEmpLearns[0][4] = doubleX
xm.CrossEmpLearns[0][5] = doubleX
xm.CrossEmpLearns[0][6] = doubleX
xm.CrossEmpLearns[1][0] = doubleX
xm.CrossEmpLearns[1][1] = doubleX
xm.CrossEmpLearns[1][2] = doubleX
xm.CrossEmpLearns[1][3] = doubleX
xm.CrossEmpLearns[1][4] = oneX
xm.CrossEmpLearns[1][5] = doubleX
xm.CrossEmpLearns[1][6] = doubleX
xm.CrossEmpLearns[2][0] = doubleX
xm.CrossEmpLearns[2][1] = doubleX
xm.CrossEmpLearns[2][2] = doubleX
xm.CrossEmpLearns[2][3] = oneX
xm.CrossEmpLearns[2][4] = doubleX
xm.CrossEmpLearns[2][5] = doubleX
xm.CrossEmpLearns[2][6] = tripleX
xm.CrossEmpLearns[3][0] = doubleX
xm.CrossEmpLearns[3][1] = doubleX
xm.CrossEmpLearns[3][2] = doubleX
xm.CrossEmpLearns[3][3] = oneX
xm.CrossEmpLearns[3][4] = doubleX
xm.CrossEmpLearns[3][5] = doubleX
xm.CrossEmpLearns[3][6] = tripleX
xm.CrossEmpLearns[4][0] = doubleX
xm.CrossEmpLearns[4][1] = doubleX
xm.CrossEmpLearns[4][2] = doubleX
xm.CrossEmpLearns[4][3] = doubleX
xm.CrossEmpLearns[4][4] = doubleX
xm.CrossEmpLearns[4][5] = doubleX
xm.CrossEmpLearns[4][6] = doubleX

//Filling CrossCourseTechs
xm.CrossCourseTechs[0][0] = oneX
xm.CrossCourseTechs[0][1] = oneX
xm.CrossCourseTechs[0][2] = oneX
xm.CrossCourseTechs[0][3] = oneX
xm.CrossCourseTechs[0][4] = oneX
xm.CrossCourseTechs[0][5] = doubleX
xm.CrossCourseTechs[1][0] = doubleX
xm.CrossCourseTechs[1][1] = oneX
xm.CrossCourseTechs[1][2] = doubleX
//xm.CrossCourseTechs[1][3] = oneX
xm.CrossCourseTechs[1][4] = oneX
xm.CrossCourseTechs[1][5] = doubleX
//xm.CrossCourseTechs[2][0] = oneX
//xm.CrossCourseTechs[2][1] = oneX
xm.CrossCourseTechs[2][2] = doubleX
//xm.CrossCourseTechs[2][3] = oneX
xm.CrossCourseTechs[2][4] = oneX
xm.CrossCourseTechs[2][5] = doubleX
xm.CrossCourseTechs[3][0] = doubleX
xm.CrossCourseTechs[3][1] = doubleX
xm.CrossCourseTechs[3][2] = tripleX
xm.CrossCourseTechs[3][3] = oneX
xm.CrossCourseTechs[3][4] = doubleX
xm.CrossCourseTechs[3][5] = tripleX
xm.CrossCourseTechs[4][0] = oneX
xm.CrossCourseTechs[4][1] = doubleX
xm.CrossCourseTechs[4][2] = doubleX
xm.CrossCourseTechs[4][3] = oneX
xm.CrossCourseTechs[4][4] = oneX
xm.CrossCourseTechs[4][5] = doubleX
xm.CrossCourseTechs[5][0] = oneX
xm.CrossCourseTechs[5][1] = tripleX
xm.CrossCourseTechs[5][2] = oneX
xm.CrossCourseTechs[5][3] = doubleX
xm.CrossCourseTechs[5][4] = doubleX
xm.CrossCourseTechs[5][5] = oneX
xm.CrossCourseTechs[6][0] = doubleX
xm.CrossCourseTechs[6][1] = doubleX
xm.CrossCourseTechs[6][2] = doubleX
xm.CrossCourseTechs[6][3] = oneX
xm.CrossCourseTechs[6][4] = doubleX
xm.CrossCourseTechs[6][5] = tripleX
xm.CrossCourseTechs[7][0] = oneX
xm.CrossCourseTechs[7][1] = oneX
xm.CrossCourseTechs[7][2] = doubleX
xm.CrossCourseTechs[7][3] = oneX
xm.CrossCourseTechs[7][4] = oneX
xm.CrossCourseTechs[7][5] = doubleX
xm.CrossCourseTechs[8][0] = doubleX
xm.CrossCourseTechs[8][1] = doubleX
xm.CrossCourseTechs[8][2] = tripleX
xm.CrossCourseTechs[8][3] = oneX
xm.CrossCourseTechs[8][4] = oneX
xm.CrossCourseTechs[8][5] = tripleX

//Filling CrossCourseLearns cross-matrix
xm.CrossCourseLearns[0][0] = oneX
xm.CrossCourseLearns[0][1] = oneX
xm.CrossCourseLearns[0][2] = oneX
xm.CrossCourseLearns[0][3] = oneX
xm.CrossCourseLearns[0][4] = oneX
xm.CrossCourseLearns[0][5] = oneX
xm.CrossCourseLearns[0][6] = doubleX
//xm.CrossCourseLearns[1][0] = oneX
xm.CrossCourseLearns[1][1] = doubleX
xm.CrossCourseLearns[1][2] = doubleX
//xm.CrossCourseLearns[1][3] = oneX
//xm.CrossCourseLearns[1][4] = oneX
//xm.CrossCourseLearns[1][5] = oneX
xm.CrossCourseLearns[1][6] = doubleX
//xm.CrossCourseLearns[2][0] = oneX
xm.CrossCourseLearns[2][1] = doubleX
xm.CrossCourseLearns[2][2] = doubleX
//xm.CrossCourseLearns[2][3] = oneX
//xm.CrossCourseLearns[2][4] = oneX
//xm.CrossCourseLearns[2][5] = oneX
//xm.CrossCourseLearns[2][6] = oneX
xm.CrossCourseLearns[3][0] = oneX
//xm.CrossCourseLearns[3][1] = oneX
xm.CrossCourseLearns[3][2] = oneX
//xm.CrossCourseLearns[3][3] = oneX
//xm.CrossCourseLearns[3][4] = oneX
xm.CrossCourseLearns[3][5] = doubleX
xm.CrossCourseLearns[3][6] = tripleX
xm.CrossCourseLearns[4][0] = oneX
//xm.CrossCourseLearns[4][1] = oneX
xm.CrossCourseLearns[4][2] = oneX
//xm.CrossCourseLearns[4][3] = oneX
//xm.CrossCourseLearns[4][4] = oneX
//xm.CrossCourseLearns[4][5] = oneX
xm.CrossCourseLearns[4][6] = doubleX
//xm.CrossCourseLearns[5][0] = oneX
xm.CrossCourseLearns[5][1] = oneX
..xm.CrossCourseLearns[5][2] = oneX
xm.CrossCourseLearns[5][3] = doubleX
xm.CrossCourseLearns[5][4] = doubleX
//xm.CrossCourseLearns[5][5] = oneX
//xm.CrossCourseLearns[5][6] = oneX
xm.CrossCourseLearns[6][0] = doubleX
//xm.CrossCourseLearns[6][1] = oneX
xm.CrossCourseLearns[6][2] = doubleX
//xm.CrossCourseLearns[6][3] = oneX
//xm.CrossCourseLearns[6][4] = oneX
//xm.CrossCourseLearns[6][5] = oneX
//xm.CrossCourseLearns[6][6] = oneX
xm.CrossCourseLearns[7][0] = doubleX
//xm.CrossCourseLearns[7][1] = oneX
//xm.CrossCourseLearns[7][2] = oneX
//xm.CrossCourseLearns[7][3] = oneX
//xm.CrossCourseLearns[7][4] = oneX
//xm.CrossCourseLearns[7][5] = oneX
xm.CrossCourseLearns[7][6] = doubleX
//xm.CrossCourseLearns[8][0] = oneX
//xm.CrossCourseLearns[8][1] = oneX
//xm.CrossCourseLearns[8][2] = oneX
//xm.CrossCourseLearns[8][3] = oneX
//xm.CrossCourseLearns[8][4] = oneX
xm.CrossCourseLearns[8][5] = doubleX
xm.CrossCourseLearns[8][6] = tripleX
